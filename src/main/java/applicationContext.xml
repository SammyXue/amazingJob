<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cxf="http://cxf.apache.org/core"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="
      http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
      http://cxf.apache.org/bindings/soap http://cxf.apache.org/schemas/configuration/soap.xsd
      http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
        http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                 http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <!-- log -->
    <cxf:bus>
        <cxf:features>
            <cxf:logging/>
        </cxf:features>
    </cxf:bus>

    <!-- 激活注解 -->
    <context:annotation-config/>
    <context:component-scan base-package="com.xcm"/>

    <!-- Jedis 配置 -->
    <context:property-placeholder location="classpath:redis.properties"
                                  ignore-unresolvable="true"/>
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"
          scope="prototype">
        <!--最大连接数 -->
        <property name="maxTotal" value="${redis.pool.maxTotal}"/>
        <!--最大空闲连接数 -->
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>
        <!--初始化连接数 -->
        <property name="minIdle" value="${redis.pool.minIdle}"/>
        <!--最大等待时间 -->
        <property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
        <!--对拿到的connection进行validateObject校验 -->
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
        <!--在进行returnObject对返回的connection进行validateObject校验 -->
        <property name="testOnReturn" value="${redis.pool.testOnReturn}"/>
        <!--定时对线程池中空闲的链接进行validateObject校验 -->
        <property name="testWhileIdle" value="${redis.pool.testWhileIdle}"/>
    </bean>
    <!-- spring data redis -->
    <bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="usePool" value="true"></property>
        <property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="timeout" value="${redis.timeout}"/>
        <constructor-arg index="0" ref="jedisPoolConfig"/>
    </bean>


    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnFactory"/>
        <property name="keySerializer">
            <bean
                    class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean
                    class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashKeySerializer">
            <bean
                    class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="hashValueSerializer">
            <bean
                    class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnFactory"/>
    </bean>
    <!--配置objectMapper-->
    <bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" scope="prototype">
    </bean>

    <!-- 引入Hibernate配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:hibernate.properties</value>
            </list>
        </property>
    </bean>
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
          destroy-method="shutdown">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="readOnly" value="false"/>
        <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
        <property name="connectionTimeout" value="${Hikari.connectionTimeout}"/>
        <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
        <property name="idleTimeout" value="${Hikari.idleTimeout}"/>
        <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL
            wait_timeout参数（show variables like '%timeout%';） -->
        <property name="maxLifetime" value="${Hikari.maxLifetime}"/>
        <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
        <property name="maximumPoolSize" value="${Hikari.maxConnCount}"/>
    </bean>
    <bean id="dynamicDataSource"
          class="com.xcm.util.interceptor.DynamicDataSource">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry value-ref="dataSource" key="dataSource"/>

            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSource"></property>
    </bean>
    <!-- 为业务逻辑层的方法解析@DataSource注解 为当前线程的routeholder注入数据源key -->
    <bean id="aspectBean" class="com.xcm.util.interceptor.DataSourceAspect"/>
    <aop:config>
        <aop:aspect id="dataSourceAspect" ref="aspectBean">
            <aop:pointcut id="dataSourcePoint"
                          expression="execution(* com.xcm.business.*Business.*(..))"/>
            <aop:before method="beforeDaoMethod" pointcut-ref="dataSourcePoint"/>
        </aop:aspect>
    </aop:config>
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!-- 指定连接池，连接池中有连接数据库的信息 -->
        <property name="dataSource" ref="dynamicDataSource"></property>
        <property name="packagesToScan">
            <list>
                <value>com.xcm.dao.hibernate.*</value>
            </list>
        </property>
        <property name="hibernateProperties"> <!-- Hibernate配置信息 -->
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.connection.url">jdbc:mysql://120.24.237.159:3306/job_offer</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
                <!-- <prop key="hibernate.default_catalog">${hibernate.default_catalog}</prop>
                    指定默认catalog -->
            </props>
        </property>
    </bean>
    <!-- 注解式事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!--webService配置-->
    <jaxrs:server id="securityWebService" address="/security">
        <jaxrs:serviceBeans>
            <bean class="com.xcm.webservice.SecurityWebService"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <ref bean="json"/>
            <ref bean="exception"/>
        </jaxrs:providers>
    </jaxrs:server>
    <jaxrs:server id="userWebService" address="/user">
        <jaxrs:serviceBeans>
            <bean class="com.xcm.webservice.UserWebService"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <ref bean="json"/>
            <ref bean="exception"/>
        </jaxrs:providers>
    </jaxrs:server>
    <jaxrs:server id="jobWebService" address="/job">
        <jaxrs:serviceBeans>
            <bean class="com.xcm.webservice.JobWebService"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <ref bean="json"/>
            <ref bean="exception"/>
        </jaxrs:providers>
    </jaxrs:server>
    <jaxrs:server id="friendWebService" address="/friend">
        <jaxrs:serviceBeans>
            <bean class="com.xcm.webservice.FriendWebService"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <ref bean="json"/>
            <ref bean="exception"/>
        </jaxrs:providers>
    </jaxrs:server>
    <jaxrs:server id="enterpriseWebSerivie" address="/enterprise">
        <jaxrs:serviceBeans>
            <bean class="com.xcm.webservice.EnterpriseWebService"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <ref bean="json"/>
            <ref bean="exception"/>
        </jaxrs:providers>
    </jaxrs:server>
    <jaxrs:server id="systemWebService" address="/system">
        <jaxrs:serviceBeans>
            <bean class="com.xcm.webservice.SystemWebService"/>
        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <ref bean="json"/>
            <ref bean="exception"/>
        </jaxrs:providers>
    </jaxrs:server>
    <!--exception-->
    <bean id="errorMessageUtil" class="com.xcm.util.ErrorMessageUtil">
        <property name="messageSource">
            <ref local="messageSource"/>
        </property>
    </bean>
    <bean id="messageSource"
          class="org.springframework.context.support.ResourceBundleMessageSource">
        <!-- 其中basenames用来指定properties文件的通用名 如实例中的errmsg_zh.properties,errmsg_zh.properties的通用名都是errmsg -->
        <property name="basenames">
            <list>
                <value>errmsg</value>
            </list>
        </property>
    </bean>
    <!--json-->
    <bean id="json" class="org.codehaus.jackson.jaxrs.JacksonJaxbJsonProvider">
        <property name="mapper">
            <bean class="com.xcm.util.CustomObjectMapper"/>
        </property>
    </bean>
    <!-- wadl generator -->
    <bean id="wadlGenerator" class="org.apache.cxf.jaxrs.model.wadl.WadlGenerator">
        <property name="ignoreRequests" value="true"/>
    </bean>
    <!--文件上传-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10485760"/>
    </bean>

    <!-- 该 BeanPostProcessor 将自动对标注 @Autowired 的 Bean 进行注入 -->
    <bean
            class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <!--websocket配置-->

    <websocket:handlers>
        <websocket:mapping path="/socket" handler="webSocketHandler"/>
        <websocket:handshake-interceptors>
            <bean class="com.xcm.socket.HandshakeInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>
</beans>